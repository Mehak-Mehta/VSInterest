{"version":3,"sources":["webpack://vs/./src/HelloworldPanel.ts","webpack://vs/./src/getNonce.ts","webpack://vs/external \"vscode\"","webpack://vs/webpack/bootstrap","webpack://vs/./src/extension.ts"],"names":["HelloWorldPanel","panel","extensionUri","_disposables","this","_panel","_extensionUri","_update","onDidDispose","dispose","column","vscode","window","activeTextEditor","viewColumn","undefined","currentPanel","reveal","createWebviewPanel","viewType","ViewColumn","One","enableScripts","localResourceRoots","Uri","joinPath","length","x","pop","webview","html","_getHtmlForWebview","onDidReceiveMessage","data","type","scriptUri","asWebviewUri","styleResetUri","styleVSCodeUri","styleMainUri","nonce","getNonce","cspSource","text","possible","i","charAt","Math","floor","random","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","context","console","log","disposable","commands","registerCommand","showInformationMessage","createOrShow","subscriptions","push"],"mappings":"wbAAA,eACA,SACA,MAAaA,EAqDX,YAAoBC,EAA4BC,GA3CxC,KAAAC,aAAoC,GA4C1CC,KAAKC,OAASJ,EACdG,KAAKE,cAAgBJ,EAGrBE,KAAKG,UAILH,KAAKC,OAAOG,cAAa,IAAMJ,KAAKK,WAAW,KAAML,KAAKD,cAlDrD,oBAAoBD,GACzB,MAAMQ,EAASC,EAAOC,OAAOC,iBACzBF,EAAOC,OAAOC,iBAAiBC,gBAC/BC,EAGJ,GAAIf,EAAgBgB,aAGlB,OAFAhB,EAAgBgB,aAAaX,OAAOY,OAAOP,QAC3CV,EAAgBgB,aAAaT,UAK/B,MAAMN,EAAQU,EAAOC,OAAOM,mBAC1BlB,EAAgBmB,SAChB,aACAT,GAAUC,EAAOS,WAAWC,IAC5B,CAEEC,eAAe,EAGfC,mBAAoB,CAClBZ,EAAOa,IAAIC,SAASvB,EAAc,SAClCS,EAAOa,IAAIC,SAASvB,EAAc,mBAKxCF,EAAgBgB,aAAe,IAAIhB,EAAgBC,EAAOC,GAGrD,c,MACuB,QAA5B,EAAAF,EAAgBgB,oBAAY,SAAEP,UAC9BT,EAAgBgB,kBAAeD,EAG1B,cAAcd,EAA4BC,GAC/CF,EAAgBgB,aAAe,IAAIhB,EAAgBC,EAAOC,GA4BrD,UAML,IALAF,EAAgBgB,kBAAeD,EAG/BX,KAAKC,OAAOI,UAELL,KAAKD,aAAauB,QAAQ,CAC/B,MAAMC,EAAIvB,KAAKD,aAAayB,MACxBD,GACFA,EAAElB,WAKM,U,yCACZ,MAAMoB,EAAUzB,KAAKC,OAAOwB,QAE5BzB,KAAKC,OAAOwB,QAAQC,KAAO1B,KAAK2B,mBAAmBF,GACnDA,EAAQG,qBAA2BC,GAAS,EAAD,gCACjCA,EAAKC,aAOT,mBAAmBL,GAEzB,MAAMM,EAAYN,EAAQO,aACxBzB,EAAOa,IAAIC,SAASrB,KAAKE,cAAe,eAAgB,kBAGpD+B,EAAgBR,EAAQO,aAAazB,EAAOa,IAAIC,SAASrB,KAAKE,cAAe,QAAS,cACxFgC,EAAiBT,EAAQO,aAAazB,EAAOa,IAAIC,SAASrB,KAAKE,cAAe,QAAS,eACvFiC,EAAeV,EAAQO,aACzBzB,EAAOa,IAAIC,SAASrB,KAAKE,cAAe,eAAgB,mBAGpDkC,EAAQ,EAAAC,WAEd,MAAO,uZASLZ,EAAQa,gCACaF,gHAENH,iDACGE,mDACAD,oDACCE,2GAMDL,YAAoBK,sBA3I5C,oBAMyB,EAAArB,SAAW,c,+ECRpC,sBACC,IAAIwB,EAAO,GACX,MAAMC,EAAW,iEACjB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACxBF,GAAQC,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASlB,SAE5D,OAAOiB,I,QCNRO,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBxC,IAAjByC,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAM,EAAoBF,GAAUG,KAAKR,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,Q,uGCrBf,eACA,SACA,oBAAyBQ,GAExBC,QAAQC,IAAI,uDACZ,IAAIC,EAAanD,EAAOoD,SAASC,gBAAgB,iBAAiB,KACjErD,EAAOC,OAAOqD,uBAAuB,gCACrC,EAAAjE,gBAAgBkE,aAAaP,EAAQzD,iBAGtCyD,EAAQQ,cAAcC,KAAKN,IAI5B,2B","file":"extension.js","sourcesContent":["import * as vscode from \"vscode\";\r\nimport { getNonce } from \"./getNonce\";\r\nexport class HelloWorldPanel {\r\n  /**\r\n   * Track the currently panel. Only allow a single panel to exist at a time.\r\n   */\r\n  public static currentPanel: HelloWorldPanel | undefined;\r\n\r\n  public static readonly viewType = \"helloworld\";\r\n\r\n  private readonly _panel: vscode.WebviewPanel;\r\n  private readonly _extensionUri: vscode.Uri;\r\n  private _disposables: vscode.Disposable[] = [];\r\n\r\n  public static createOrShow(extensionUri: vscode.Uri) {\r\n    const column = vscode.window.activeTextEditor\r\n      ? vscode.window.activeTextEditor.viewColumn\r\n      : undefined;\r\n\r\n    // If we already have a panel, show it.\r\n    if (HelloWorldPanel.currentPanel) {\r\n      HelloWorldPanel.currentPanel._panel.reveal(column);\r\n      HelloWorldPanel.currentPanel._update();\r\n      return;\r\n    }\r\n\r\n    // Otherwise, create a new panel.\r\n    const panel = vscode.window.createWebviewPanel(\r\n      HelloWorldPanel.viewType,\r\n      \"VSInterest\",\r\n      column || vscode.ViewColumn.One,\r\n      {\r\n        // Enable javascript in the webview\r\n        enableScripts: true,\r\n\r\n        // And restrict the webview to only loading content from our extension's `media` directory.\r\n        localResourceRoots: [\r\n          vscode.Uri.joinPath(extensionUri, \"media\"),\r\n          vscode.Uri.joinPath(extensionUri, \"out/compiled\"),\r\n        ],\r\n      }\r\n    );\r\n\r\n    HelloWorldPanel.currentPanel = new HelloWorldPanel(panel, extensionUri);\r\n  }\r\n\r\n  public static kill() {\r\n    HelloWorldPanel.currentPanel?.dispose();\r\n    HelloWorldPanel.currentPanel = undefined;\r\n  }\r\n\r\n  public static revive(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\r\n    HelloWorldPanel.currentPanel = new HelloWorldPanel(panel, extensionUri);\r\n  }\r\n\r\n  private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\r\n    this._panel = panel;\r\n    this._extensionUri = extensionUri;\r\n\r\n    // Set the webview's initial html content\r\n    this._update();\r\n\r\n    // Listen for when the panel is disposed\r\n    // This happens when the user closes the panel or when the panel is closed programatically\r\n    this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\r\n\r\n    // // Handle messages from the webview\r\n    // this._panel.webview.onDidReceiveMessage(\r\n    //   (message) => {\r\n    //     switch (message.command) {\r\n    //       case \"alert\":\r\n    //         vscode.window.showErrorMessage(message.text);\r\n    //         return;\r\n    //     }\r\n    //   },\r\n    //   null,\r\n    //   this._disposables\r\n    // );\r\n  }\r\n\r\n  public dispose() {\r\n    HelloWorldPanel.currentPanel = undefined;\r\n\r\n    // Clean up our resources\r\n    this._panel.dispose();\r\n\r\n    while (this._disposables.length) {\r\n      const x = this._disposables.pop();\r\n      if (x) {\r\n        x.dispose();\r\n      }\r\n    }\r\n  }\r\n\r\n  private async _update() {\r\n    const webview = this._panel.webview;\r\n\r\n    this._panel.webview.html = this._getHtmlForWebview(webview);\r\n    webview.onDidReceiveMessage(async (data) => {\r\n      switch (data.type) {\r\n       \r\n        \r\n        }\r\n    });\r\n  }\r\n\r\n  private _getHtmlForWebview(webview: vscode.Webview) {\r\n    // // And the uri we use to load this script in the webview\r\n    const scriptUri = webview.asWebviewUri(\r\n      vscode.Uri.joinPath(this._extensionUri, \"out/compiled\", \"helloworld.js\")\r\n    );\r\n    // Local path to css styles\r\n    const styleResetUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'reset.css'));\r\n\t\tconst styleVSCodeUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'vscode.css'));\r\n\t\tconst styleMainUri = webview.asWebviewUri(\r\n      vscode.Uri.joinPath(this._extensionUri, \"out/compiled\", \"helloworld.css\")\r\n    );\r\n    // Use a nonce to only allow specific scripts to be run\r\n    const nonce = getNonce();\r\n\r\n    return `<!DOCTYPE html>\r\n\t\t\t<html lang=\"en\">\r\n\t\t\t<head>\r\n\t\t\t\t<meta charset=\"UTF-8\">\r\n\t\t\t\t<!--\r\n\t\t\t\t\tUse a content security policy to only allow loading images from https or from our extension directory,\r\n\t\t\t\t\tand only allow scripts that have a specific nonce.\r\n        -->\r\n        <meta http-equiv=\"Content-Security-Policy\" content= img-src https: data:; style-src 'unsafe-inline' ${\r\n      webview.cspSource\r\n    }; script-src 'nonce-${nonce}';\">\r\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\t\t\t   <link href= \"${styleResetUri}\" rel = \"stylesheet\">\r\n         <link href= \"${styleMainUri}\" rel = \"stylesheet\">\t\r\n         <link href= \"${styleVSCodeUri}\" rel = \"stylesheet\">\t\r\n        <script nonce=\"${nonce}\">\r\n           \r\n        </script>\r\n\t\t\t</head>\r\n      <body>\r\n\t\t\t</body>\r\n      <script  src = \"${scriptUri}\"nonce=\"${nonce}\">\r\n\t\t\t</html>`;\r\n  }\r\n}","export function getNonce() {\r\n\tlet text = '';\r\n\tconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\tfor (let i = 0; i < 32; i++) {\r\n\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\r\n\t}\r\n\treturn text;\r\n}","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport { HelloWorldPanel } from './HelloworldPanel';\nexport function activate(context: vscode.ExtensionContext) {\n\t\n\tconsole.log('Congratulations, your extension \"vs\" is now active!');\n\tlet disposable = vscode.commands.registerCommand('vs.helloWorld', () => {\n\t\tvscode.window.showInformationMessage('Hello World from Vsinterest!');\n\t\tHelloWorldPanel.createOrShow(context.extensionUri)\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}"],"sourceRoot":""}